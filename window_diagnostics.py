#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫–æ–Ω - —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –æ–∫–æ–Ω
"""

import sys
import os
import logging
import pygetwindow as gw
import win32gui
import win32con
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from window_binder.utils import WindowUtils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_all_windows_detailed() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –æ–∫–Ω–∞—Ö"""
    windows_info = []
    
    def enum_windows_callback(hwnd, windows_list):
        if win32gui.IsWindowVisible(hwnd):
            window_text = win32gui.GetWindowText(hwnd)
            class_name = win32gui.GetClassName(hwnd)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
            try:
                rect = win32gui.GetWindowRect(hwnd)
                left, top, right, bottom = rect
                width = right - left
                height = bottom - top
            except:
                left = top = width = height = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
            try:
                is_minimized = win32gui.IsIconic(hwnd)
                # IsZoomed –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö
                is_maximized = False
                try:
                    is_maximized = win32gui.IsZoomed(hwnd)
                except AttributeError:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏
                    window_placement = win32gui.GetWindowPlacement(hwnd)
                    is_maximized = window_placement[1] == win32con.SW_SHOWMAXIMIZED
            except:
                is_minimized = False
                is_maximized = False
            
            window_info = {
                'hwnd': hwnd,
                'title': window_text,
                'class_name': class_name,
                'left': left,
                'top': top,
                'width': width,
                'height': height,
                'is_minimized': is_minimized,
                'is_maximized': is_maximized,
                'is_visible': True
            }
            
            windows_list.append(window_info)
        
        return True
    
    windows_list = []
    win32gui.EnumWindows(enum_windows_callback, windows_list)
    
    return windows_list

def get_pygetwindow_windows() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ pygetwindow"""
    windows_info = []
    
    try:
        windows = gw.getAllWindows()
        for window in windows:
            if window.title.strip():  # –¢–æ–ª—å–∫–æ –æ–∫–Ω–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                window_info = {
                    'title': window.title,
                    'left': window.left,
                    'top': window.top,
                    'width': window.width,
                    'height': window.height,
                    'is_minimized': window.isMinimized,
                    'is_maximized': window.isMaximized,
                    'is_visible': window.visible
                }
                windows_info.append(window_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∫–æ–Ω —á–µ—Ä–µ–∑ pygetwindow: {e}")
    
    return windows_info

def search_window_by_partial_title(search_term: str) -> List[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –æ–∫–æ–Ω –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è"""
    all_windows = get_all_windows_detailed()
    matching_windows = []
    
    search_term_lower = search_term.lower()
    
    for window in all_windows:
        title_lower = window['title'].lower()
        if search_term_lower in title_lower:
            matching_windows.append(window)
    
    return matching_windows

def test_window_detection(target_window_name: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    logger.info(f"=== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫–Ω–∞: '{target_window_name}' ===")
    
    # –¢–µ—Å—Ç 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pygetwindow
    logger.info("\n1. –¢–µ—Å—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ pygetwindow:")
    try:
        windows = gw.getWindowsWithTitle(target_window_name)
        if windows:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(windows)} –æ–∫–æ–Ω —Å —Ç–æ—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º")
            for i, window in enumerate(windows):
                logger.info(f"   –û–∫–Ω–æ {i+1}: {window.title} at ({window.left}, {window.top})")
        else:
            logger.warning("‚ùå –û–∫–Ω–∞ —Å —Ç–æ—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    logger.info("\n2. –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é:")
    matching_windows = search_window_by_partial_title(target_window_name)
    if matching_windows:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matching_windows)} –æ–∫–æ–Ω —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º:")
        for window in matching_windows:
            logger.info(f"   - '{window['title']}' (–∫–ª–∞—Å—Å: {window['class_name']})")
    else:
        logger.warning("‚ùå –û–∫–Ω–∞ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ WindowUtils
    logger.info("\n3. –¢–µ—Å—Ç —á–µ—Ä–µ–∑ WindowUtils:")
    window_info = WindowUtils.get_window_info(target_window_name)
    if window_info:
        logger.info(f"‚úÖ WindowUtils –Ω–∞—à–µ–ª –æ–∫–Ω–æ: {window_info}")
    else:
        logger.warning("‚ùå WindowUtils –Ω–µ –Ω–∞—à–µ–ª –æ–∫–Ω–æ")
    
    # –¢–µ—Å—Ç 4: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∫–Ω–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    logger.info("\n4. –í—Å–µ –æ–∫–Ω–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏:")
    words = target_window_name.split()
    for word in words:
        if len(word) > 3:  # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞
            similar_windows = search_window_by_partial_title(word)
            if similar_windows:
                logger.info(f"   –û–∫–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{word}':")
                for window in similar_windows[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    logger.info(f"     - '{window['title']}'")

def show_all_windows():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫–Ω–∞"""
    logger.info("=== –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫–Ω–∞ ===")
    
    # –ß–µ—Ä–µ–∑ win32gui
    logger.info("\n1. –û–∫–Ω–∞ —á–µ—Ä–µ–∑ win32gui:")
    win32_windows = get_all_windows_detailed()
    visible_windows = [w for w in win32_windows if w['title'].strip()]
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(visible_windows)} –≤–∏–¥–∏–º—ã—Ö –æ–∫–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏:")
    for window in visible_windows[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        logger.info(f"   - '{window['title']}' (–∫–ª–∞—Å—Å: {window['class_name']})")
    
    if len(visible_windows) > 20:
        logger.info(f"   ... –∏ –µ—â–µ {len(visible_windows) - 20} –æ–∫–æ–Ω")
    
    # –ß–µ—Ä–µ–∑ pygetwindow
    logger.info("\n2. –û–∫–Ω–∞ —á–µ—Ä–µ–∑ pygetwindow:")
    pg_windows = get_pygetwindow_windows()
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pg_windows)} –æ–∫–æ–Ω:")
    for window in pg_windows[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        logger.info(f"   - '{window['title']}'")
    
    if len(pg_windows) > 20:
        logger.info(f"   ... –∏ –µ—â–µ {len(pg_windows) - 20} –æ–∫–æ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–∫–æ–Ω")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞
    show_all_windows()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–∫–Ω–∞ –∏–∑ –ø—Ä–∏–≤—è–∑–æ–∫
    logger.info("\n" + "="*60)
    
    # –ß–∏—Ç–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
    try:
        import json
        bindings_file = os.path.join("settings", "bindings.json")
        if os.path.exists(bindings_file):
            with open(bindings_file, 'r', encoding='utf-8') as f:
                bindings = json.load(f)
            
            logger.info(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω –∏–∑ {len(bindings)} –ø—Ä–∏–≤—è–∑–æ–∫:")
            
            tested_apps = set()
            for binding_data in bindings:
                app_name = binding_data.get('app_name', '')
                if app_name and app_name not in tested_apps:
                    tested_apps.add(app_name)
                    logger.info(f"\n{'='*60}")
                    test_window_detection(app_name)
        else:
            logger.warning("–§–∞–π–ª –ø—Ä–∏–≤—è–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–æ–∫: {e}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ
    logger.info(f"\n{'='*60}")
    logger.info("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–∫–Ω–∞:")
    test_window_detection("‚Äé–ú–æ–π –†–µ–≥–ª–æ–º–æ–±–∞–π–ª @ ‚Äésergei (204331)")
    
    logger.info("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()